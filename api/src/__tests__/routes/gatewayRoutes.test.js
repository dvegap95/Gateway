require("../dotenv");
const request = require("supertest");
const server = require("../../server");

//generic gateway valid data
const gatewayData = {
  name: "gatewayTest",
  serialNumber: "123",
  ipAddress: "10.10.10.10",
  devices: [
    { uid: 1, vendor: "vendor1", status: "online" },
    { uid: 2, vendor: "vendor2", status: "offline" },
    { uid: 3, vendor: "vendor3", status: "online" },
  ],
};

describe("gateway routes", () => {
  //get request to endpoint returns an array
  it("fetches all gateways", async () => {
    const resp = await request(server).get("/api/gateways/");
    expect(resp.statusCode).toBe(200);
    expect(resp.body.length).toBeGreaterThanOrEqual(0);
  });
  test("gateways CRUD", async () => {
    //post request to endpoint with valid data as body
    let response = await request(server)
      .post("/api/gateways/")
      .send(gatewayData);

    expect(response.statusCode).toBe(201); //expect status code to be
    let gateway = response.body;
    //expect response gateway to have an _id field (which is assigned by database)
    expect(!!gateway._id).toBe(true);

    //compare gateway valid test object with response gateway
    for (const key in gatewayData) {
      if (Object.hasOwnProperty.call(gatewayData, key)) {
        if (!Array.isArray(gateway[key])) {
          expect(gateway[key]).toBe(gatewayData[key]);
        } else {
          //for every item in array properties (devices) compare the uid field
          //this is done manually since resulting devices will have also an '_id' and a 'created'
          //property generated by database upon creation
          gateway[key].forEach((el, index) => {
            expect(el.uid).toBe(gatewayData[key][index].uid);
          });
        }
      }
    }

    //--------------------------NEXT REQUEST------------------------------------
    //get request to endpoint with specific id
    let response2 = await request(server).get("/api/gateways/" + gateway._id);
    expect(response2.statusCode).toBe(200); //expect success
    let gateway2 = response2.body;
    //compare response gateway with previously created one
    expect(gateway2).toEqual(gateway);

    //--------------------------NEXT REQUEST------------------------------------
    //patch request to endpoint with specific id and different gateway data
    let response3 = await request(server)
      .patch("/api/gateways/" + gateway._id)
      .send({ name: "gateway name changed" });

    expect(response3.statusCode).toBe(200); //expect success
    let gateway3 = response3.body;
    //expect response gateway name to be the latest assigned name
    expect(gateway3.name).toBe("gateway name changed");

    //--------------------------NEXT REQUEST------------------------------------
    //delete request to endpoint
    let response4 = await request(server).delete(
      "/api/gateways/" + gateway._id
    );
    expect(response4.statusCode).toBe(200); //expect success

    //try to delete same gateway again to confirm it doesn't exists anymore
    response4 = await request(server).delete("/api/gateways/" + gateway._id);
    expect(response4.statusCode).toBe(404); //expect failure
  });

  it("returns 404 when not found", async () => {
    //get request with specific wrong id
    let response = await request(server).get("/api/gateways/" + "random-id");
    expect(response.statusCode).toBe(404); //expect not found

    //patch request with specific wrong id
    response = await request(server)
      .patch("/api/gateways/" + "random-id")
      .send({});
    expect(response.statusCode).toBe(404); //expect not found

    //delete request with specific wrong id
    response = await request(server).delete("/api/gateways/" + "random-id");
    expect(response.statusCode).toBe(404); //expect not found
  });

  it("validates when creating and updating", async () => {
    let gateway = gatewayData;
    gateway.ipAddress = "300.0.0.1"; //wrong ip (300 is out of range)
    //try to create gateway
    let response = await request(server).post("/api/gateways/").send(gateway);
    expect(response.statusCode).toBe(400); //expect bad request
    expect(response.body.ipAddress.name).toBe("ValidatorError"); //expect ipAddress-related validator error

    gateway.ipAddress = "200.0.0.1"; //right ip

    //try to create gateway with 11 devices
    response = await request(server)
      .post("/api/gateways/")
      .send({ ...gateway, devices: new Array(11).fill({}) });
    expect(response.statusCode).toBe(400); //expect bad request
    expect(response.body.devices.name).toBe("ValidatorError"); //expect devices-related validator error

    //create right gateway (right ipAddress and 10 devices(top))
    response = await request(server)
      .post("/api/gateways/")
      .send({ ...gateway, devices: new Array(10).fill({}) });
    expect(response.statusCode).toBe(201); //expect created successfully

    let id = response.body._id; //save created gateway _id

    //try patch gateway with wrong ip address
    response = await request(server)
      .patch("/api/gateways/" + id)
      .send({
        ipAddress: "3.3.4.5.6", //wrong(5 bytes)
      });
    expect(response.statusCode).toBe(400); //expect bad request

    //try patch gateway with too many devices
    response = await request(server)
      .patch("/api/gateways/" + id)
      .send({
        devices: new Array(11).fill({}),
      });
    expect(response.statusCode).toBe(400); //expect bad request
    expect(response.body.devices.name).toBe("ValidatorError"); //expect devices-related validator error

    //patch right gateway
    response = await request(server)
      .patch("/api/gateways/" + id)
      .send({
        ipAddress: "3.4.5.6",
        devices: new Array(10).fill({}),
      });
    expect(response.statusCode).toBe(200); //expect success
    expect(response.body.ipAddress).toBe("3.4.5.6"); //expect gateway ipAddress to be changed
    expect(response.body.devices.length).toBe(10); //expect gateway to have 10 devices

    response = await request(server).delete("/api/gateways/" + id); // delete test gateway
    expect(response.statusCode).toBe(200); //expect success
  });

  it("adds, removes and validates gateway's devices", async () => {
    //post request to create gateway
    let response = await request(server).post("/api/gateways/").send({});
    expect(response.statusCode).toBe(201); //expect success
    expect(response.body.devices.length).toBe(0); //expect gateway devices array to be empty
    let _id = response.body._id; //store gateway id

    //post to specific gateway's device endpoint with new device valid data as body
    //should create a device and add it to the gateway
    response = await request(server)
      .post("/api/gateways/" + _id + "/device")
      .send({ uid: 1 });
    expect(response.statusCode).toBe(201); //expect created successfully
    expect(response.body.uid).toBe(1); //expect feedback data to match sent data
    let devId0 = response.body._id; //save created device id

    //add another new device to gateway
    response = await request(server)
      .post("/api/gateways/" + _id + "/device")
      .send({ uid: 2 });
    expect(response.statusCode).toBe(201); // expect created successfully
    expect(response.body.status).toBe("offline"); //default
    expect(response.body.uid).toBe(2); //expect feedback data to match sent data
    let devId1 = response.body._id; //save created device id

    //get the previously created gateway
    response = await request(server).get("/api/gateways/" + _id);
    expect(response.statusCode).toBe(200); //expect success
    expect(response.body.devices.length).toBe(2); //expect it to have 2 devices
    //expect devices id's and uid's to match created ones
    expect(response.body.devices[0]._id).toBe(devId0);
    expect(response.body.devices[0].uid).toBe(1);
    expect(response.body.devices[1]._id).toBe(devId1);
    expect(response.body.devices[1].uid).toBe(2);

    //delete specific device from specific gateway
    response = await request(server).delete(
      "/api/gateways/" + _id + "/device/" + devId0
    );
    expect(response.statusCode).toBe(200); //expect success
    expect(response.body._id).toBe(devId0); //expect result id to match deleted id

    //get the previously created gateway
    response = await request(server).get("/api/gateways/" + _id);
    expect(response.statusCode).toBe(200); //expect success

    //expect gateway to have 1 device since the other was deleted
    expect(response.body.devices.length).toBe(1);

    //expect device data to match the one that was not deleted
    expect(response.body.devices[0]._id).toBe(devId1);
    expect(response.body.devices[0].uid).toBe(2);

    response = await request(server).delete("/api/gateways/" + _id); //delete test gateway
    expect(response.statusCode).toBe(200); //expect success
  });
});
