require("../dotenv");
const request = require("supertest");
const server = require("../../server");

//valid device data
const deviceData = {
  uid: 123,
  vendor: "vendor",
};

describe("devices routes", () => {
  //get request to endpoint returns an array
  it("fetches all devices", async () => {
    const resp = await request(server).get("/api/peripheral-devices/");
    expect(resp.statusCode).toBe(200);
    expect(resp.body.length).toBeGreaterThanOrEqual(0);
  });
  test("devices CRUD", async () => {
    //post request to endpoint with valid data as body
    let response = await request(server)
      .post("/api/peripheral-devices/")
      .send(deviceData);

    expect(response.statusCode).toBe(201); //expect status code to be
    let device = response.body;
    //expect response device to have an _id field (which is assigned by database)
    expect(!!device._id).toBe(true);

    //compare device valid test object with response device
    for (const key in deviceData) {
      if (Object.hasOwnProperty.call(deviceData, key)) {
        if (!Array.isArray(device[key])) {
          expect(device[key]).toBe(deviceData[key]);
        } else {
          //for every item in array properties (devices) compare the uid field
          //this is done manually since resulting devices will have also an '_id' and a 'created'
          //property generated by database upon creation
          device[key].forEach((el, index) => {
            expect(el.uid).toBe(deviceData[key][index].uid);
          });
        }
      }
    }

    //--------------------------NEXT REQUEST------------------------------------
    //get request to endpoint with specific id
    let response2 = await request(server).get(
      "/api/peripheral-devices/" + device._id
    );
    expect(response2.statusCode).toBe(200); //expect success
    let device2 = response2.body;
    //compare response device with previously created one
    expect(device2).toEqual(device);

    //--------------------------NEXT REQUEST------------------------------------
    //patch request to endpoint with specific id and different device data
    let response3 = await request(server)
      .patch("/api/peripheral-devices/" + device._id)
      .send({ uid: 5555 });

    expect(response3.statusCode).toBe(200); //expect success
    let device3 = response3.body;
    //expect response device uid to be the latest assigned uid
    expect(device3.uid).toBe(5555);

    //--------------------------NEXT REQUEST------------------------------------
    //delete request to endpoint
    let response4 = await request(server).delete(
      "/api/peripheral-devices/" + device._id
    );
    expect(response4.statusCode).toBe(200); //expect success

    //try to delete same device again to confirm it doesn't exists anymore
    response4 = await request(server).delete(
      "/api/peripheral-devices/" + device._id
    );
    expect(response4.statusCode).toBe(404); //expect failure
  });

  it("returns 404 when not found", async () => {
    //get request with specific wrong id
    let response = await request(server).get(
      "/api/peripheral-devices/" + "random-id"
    );
    expect(response.statusCode).toBe(404); //expect not found

    //patch request with specific wrong id
    response = await request(server)
      .patch("/api/peripheral-devices/" + "random-id")
      .send({});
    expect(response.statusCode).toBe(404); //expect not found

    //delete request with specific wrong id
    response = await request(server).delete(
      "/api/peripheral-devices/" + "random-id"
    );
    expect(response.statusCode).toBe(404); //expect not found
  });

  it("validates when creating and updating", async () => {
    let device = deviceData;
    device.uid = "some string"; //wrong uid (type should be Number)
    //try to create device
    let response = await request(server)
      .post("/api/peripheral-devices/")
      .send(device);
    expect(response.statusCode).toBe(400); // expect bad request
    expect(response.body.uid.name).toBe("CastError"); //expect uid-related cast error

    device.uid = 222; //right id

    //try to create device with invalid status (different from online/offline)
    response = await request(server)
      .post("/api/peripheral-devices/")
      .send({ ...device, status: "other" });
    expect(response.statusCode).toBe(400); // expect bad request
    expect(response.body.status.name).toBe("ValidatorError");//expect status-related validator error

    response = await request(server)
      .post("/api/peripheral-devices/")
      .send(device); //creates right device
    expect(response.statusCode).toBe(201);//expect created successfully

    let id = response.body._id;//save created device id

    //try to patch device with wrong type uid
    response = await request(server)
      .patch("/api/peripheral-devices/" + id)
      .send({
        uid: "str",
      });
    expect(response.statusCode).toBe(400); // expect bad request
    expect(response.body.uid.name).toBe("CastError");//expect uid-related cast error

    //try to patch device with wrong type status
    response = await request(server)
      .patch("/api/peripheral-devices/" + id)
      .send({
        status: "aaaa",
      });
    expect(response.statusCode).toBe(400); // expect bad request
    expect(response.body.status.name).toBe("ValidatorError");//expect status-related validator error

    //try to patch device with right data
    response = await request(server)
      .patch("/api/peripheral-devices/" + id)
      .send({
        uid: 1,
        status: "online",
      });
    expect(response.statusCode).toBe(200);// expect success
    //check match of feedback device data with sent data
    expect(response.body.status).toBe("online");
    expect(response.body.uid).toBe(1);

    response = await request(server).delete("/api/peripheral-devices/" + id);//delete test device
    expect(response.statusCode).toBe(200);//expect success
  });
});
